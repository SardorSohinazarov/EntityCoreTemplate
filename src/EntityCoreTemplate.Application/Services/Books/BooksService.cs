//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using EntityCoreTemplate.Infrastructure;
using EntityCoreTemplate.Domain.Entities;

namespace Services.Books
{
    [ScopedService]
    public class BooksService : IBooksService
    {
        private readonly EntityCoreTemplateDb _entityCoreTemplateDb;
        private readonly IMapper _mapper;
        public BooksService(EntityCoreTemplateDb entityCoreTemplateDb, IMapper mapper)
        {
            _entityCoreTemplateDb = entityCoreTemplateDb;
            _mapper = mapper;
        }

        public async Task<Book> AddAsync(Book book)
        {
            var entity = _mapper.Map<Book>(book);
            var entry = await _entityCoreTemplateDb.Set<Book>().AddAsync(entity);
            await _entityCoreTemplateDb.SaveChangesAsync();
            return entry.Entity;
        }

        public async Task<List<Book>> GetAllAsync()
        {
            var entities = await _entityCoreTemplateDb.Set<Book>().ToListAsync();
            return entities;
        }

        public async Task<ListResult<Book>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _entityCoreTemplateDb.Set<Book>().ApplyPaginationAsync(filter);
            var Books = _mapper.Map<List<Book>>(paginatedResult.paginatedList);
            return new ListResult<Book>(paginatedResult.paginationMetadata, Books);
        }

        public async Task<Book> GetByIdAsync(long id)
        {
            var entity = await _entityCoreTemplateDb.Set<Book>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Book with Id {id} not found.");
            return entity;
        }

        public async Task<Book> UpdateAsync(long id, Book book)
        {
            var entity = await _entityCoreTemplateDb.Set<Book>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Book with {id} not found.");
            _mapper.Map(book, entity);
            var entry = _entityCoreTemplateDb.Set<Book>().Update(entity);
            await _entityCoreTemplateDb.SaveChangesAsync();
            return entry.Entity;
        }

        public async Task<Book> DeleteAsync(long id)
        {
            var entity = await _entityCoreTemplateDb.Set<Book>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Book with {id} not found.");
            var entry = _entityCoreTemplateDb.Set<Book>().Remove(entity);
            await _entityCoreTemplateDb.SaveChangesAsync();
            return entry.Entity;
        }
    }
}